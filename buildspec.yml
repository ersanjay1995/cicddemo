version: 0.2
phases:
  install:
    commands:
      # Install all dependencies (including dependencies for running tests)
      - npm install
  pre_build:
    commands:
      # Discover and run unit tests in the '__tests__' directory
      #- npm run test
      # Remove all unit tests to reduce the size of the package that will be ultimately uploaded to Lambda
      #- rm -rf ./__tests__
      # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
      #- npm prune --production
  build:
    commands:
      - export # expose
      # try buildspecs
      - yum install -y jq
      - aws codebuild start-build --project-name mnp-t2 --source-version $CODEBUILD_SOURCE_VERSION --buildspec-override lambda-f3/buildspec.yml --artifacts-override type=s3,location=$CODEBUILD_SOURCE_VERSION |jq -r ".build.id" >bid
      - sleep 15; maxTime=120;
      - until aws codebuild batch-get-builds --ids $(cat bid) | jq -r ".builds[0].buildStatus" | grep -q "SUCCEEDED"; do sleep 1;if [[ $((maxTime--)) -lt 0 ]]; then echo Timedout; exit 1; fi;  done;
      #| grep "IN_PROGRESS" 
      # show sub-codebuild
      - aws codebuild batch-get-builds --ids $(cat bid)
      - echo $(aws codebuild batch-get-builds --ids $(cat bid) |  jq -r ".builds[0].artifacts.location")/template.yml
      # merge em
      - mkdir tomerge
      - find . -name template.yml | sed -e "p; s:/:__:g; s:^:tomerge/:g" | xargs -n2 cp
      - npm install -g cloudformation-yml-merger-cli
      - cloudformation-yml-merger-cli -i tomerge -o tmp-merged-template.yml
      # apply tokens
      -  grep '^[[:space:]]*#.*TOKEN' template.yml  | sed 's/^[[:space:]]*#[[:space:]]*//g'|awk -F= 'FNR==NR {key=$1; $1=""; array[key]=substr($0,2); next } { for (i in array) gsub(i, array[i]) }1' - tmp-merged-template.yml > merged-template.yml
      - rm -rf tomerge tmp-merged-template.yml
      - npm uninstall -g cloudformation-yml-merger-cli
      - mv merged-template.yml template.yml
      - cat template.yml
      # Use AWS SAM to package the application by using AWS CloudFormation
      #- aws cloudformation package --template merged-template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      - sam package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      # Use AWS SAM to install cruft
      #- aws cloudformation deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name mnp-t2
      - echo ===========================================================naya==================================
      - cat template-export.yml
      - sam deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name mnp-t2
      # ======================F2======================
      # Use AWS SAM to package the application by using AWS CloudFormation
      #- aws cloudformation package --template lambda-f2/template.yml --s3-bucket $S3_BUCKET --output-template lambda-f2/template-export.yml
      # Use AWS SAM to install cruft
      #- aws cloudformation deploy --capabilities CAPABILITY_IAM --template-file lambda-f2/template-export.yml --stack-name mnp-t2
      
artifacts:
  type: zip
  files:
    - template-export.yml
