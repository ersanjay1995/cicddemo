version: 0.2
phases:
  install:
    commands:
      # Install all dependencies (including dependencies for running tests)
      - npm install
  pre_build:
    commands:
      # Discover and run unit tests in the '__tests__' directory
      - npm run test
      # Remove all unit tests to reduce the size of the package that will be ultimately uploaded to Lambda
      - rm -rf ./__tests__
      # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
      - npm prune --production
  build:
    commands:
      # merge em
      - mkdir tomerge
      - find . -name template.yml | sed -e "p; s:/:__:g; s:^:tomerge/:g" | xargs -n2 cp
      - npm install -g cloudformation-yml-merger-cli
      - cloudformation-yml-merger-cli -i tomerge -o merged-template.yml
      - rm -rf tomerge
      - npm uninstall -g cloudformation-yml-merger-cli
      # Use AWS SAM to package the application by using AWS CloudFormation
      #- aws cloudformation package --template merged-template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      - sam package --template merged-template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      # Use AWS SAM to install cruft
      #- aws cloudformation deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name mnp-t2
      - sam deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name mnp-t2
      # ======================F2======================
      # Use AWS SAM to package the application by using AWS CloudFormation
      #- aws cloudformation package --template lambda-f2/template.yml --s3-bucket $S3_BUCKET --output-template lambda-f2/template-export.yml
      # Use AWS SAM to install cruft
      #- aws cloudformation deploy --capabilities CAPABILITY_IAM --template-file lambda-f2/template-export.yml --stack-name mnp-t2
      
artifacts:
  type: zip
  files:
    - template-export.yml
