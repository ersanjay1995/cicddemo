version: 0.2
phases:
  install:
    commands:
      - export # expose
      - yum install -y jq
  build:
    commands:
      # try buildspecs
      - ls -l | egrep '^d' | awk '{print $9}' | xargs -n1 bash -x applied_build_spec.sh 
      # merge em
      - mkdir tomerge
      - find . -maxdepth 2 -name template.yml | sed -e "p; s:/:__:g; s:^:tomerge/:g" | xargs -n2 cp
      - npm install -g cloudformation-yml-merger-cli
      - cloudformation-yml-merger-cli -i tomerge -o tmp-merged-template.yml
      # apply tokens
      -  grep '^[[:space:]]*#.*TOKEN' template.yml  | sed 's/^[[:space:]]*#[[:space:]]*//g'|awk -F= 'FNR==NR {key=$1; $1=""; array[key]=substr($0,2); next } { for (i in array) gsub(i, array[i]) }1' - tmp-merged-template.yml > merged-template.yml
      - rm -rf tomerge tmp-merged-template.yml
      - npm uninstall -g cloudformation-yml-merger-cli
      - mv merged-template.yml template.yml
      # PACKAGE
      #- aws cloudformation package --template merged-template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      # Use AWS SAM to package the application by using AWS CloudFormation
      - sam package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
      - cat template-export.yml
      # INSTALL
      #- aws cloudformation deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name ${APP_ID}
      # Use AWS SAM to install cruft
      - sam deploy --capabilities CAPABILITY_IAM --template-file template-export.yml --stack-name ${APP_ID}
      - echo Success >out
    finally:
     - cat out || aws cloudformation describe-stack-events --stack-name ${APP_ID}
      
artifacts:
  type: zip
  files:
    - template-export.yml
